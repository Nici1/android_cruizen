package org.pytorch.demo.objectdetection;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GestureDetectorCompat;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.LineChartView;

public class DataActivity extends AppCompatActivity {

    private LineChartView chart;
    private GestureDetectorCompat gestureDetectorCompat;
    String receivedMessage;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_data);

        Intent intent = getIntent();
        ArrayList<String> timeList = intent.getStringArrayListExtra("timeList");
        ArrayList<Integer> detectionList = intent.getIntegerArrayListExtra("detectionList");
        receivedMessage = getIntent().getStringExtra("Detection");



        chart = findViewById(R.id.chart);



        List<PointValue> values = new ArrayList<>();
        for (int i = 0; i < detectionList.size(); i++) {
            values.add(new PointValue(i, detectionList.get(i)));
        }

        Line line = new Line(values).setColor(ChartUtils.COLOR_BLUE);
        List<Line> lines = new ArrayList<>();
        lines.add(line);

        LineChartData data = new LineChartData();
        data.setLines(lines);

        Axis axisX = new Axis();
        Axis axisY = new Axis().setHasLines(true);
        axisX.setAutoGenerated(false);
        axisX.setValues(generateAxisValues(timeList));
        axisY.setName("Detections");
        data.setAxisXBottom(axisX);
        data.setAxisYLeft(axisY);

        chart.setLineChartData(data);

        Viewport v = new Viewport(chart.getMaximumViewport());
        v.bottom = 0;
        v.top = 150;
        chart.setMaximumViewport(v);
        chart.setCurrentViewport(v);


        gestureDetectorCompat = new GestureDetectorCompat(this, new MyGestureListener());
    }

    private List<AxisValue> generateAxisValues(List<String> dates) {
        List<AxisValue> axisValues = new ArrayList<>();
        for (int i = 0; i < dates.size(); i++) {
            axisValues.add(new AxisValue(i).setLabel(dates.get(i)));
        }
        return axisValues;
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        gestureDetectorCompat.onTouchEvent(event);
        return super.onTouchEvent(event);
    }

    private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {
        private static final int SWIPE_THRESHOLD = 100;
        private static final int SWIPE_VELOCITY_THRESHOLD = 100;

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            float diffX = e2.getX() - e1.getX();
            float diffY = e2.getY() - e1.getY();

            if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                if (diffX > 0) {
                    // Swipe from left to right, transition to SecondActivity
                    Intent intent = new Intent(DataActivity.this, FunFactActivity.class);
                    intent.putExtra("Detection", receivedMessage);
                    startActivity(intent);
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);
                    return true;
                } else {

                }
            }
            return super.onFling(e1, e2, velocityX, velocityY);
        }
    }
}













